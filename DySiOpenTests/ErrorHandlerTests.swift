//
//  ErrorHandlerTests.swift
//  DySiOpenTests
//
//  Created by Samman Thapa on 5/8/18.
//  Copyright Â© 2018 Samman Labs. All rights reserved.
//

import XCTest

@testable import DySi_Open

class MockUIViewController: UIViewController {
    var testDisplayedMessageToUserUsingAlertViewCount: Int = 0
    var testTitleOfAlertView: String?
    var testMessageOfAlertView: String?
    override func displayMessageToUserUsingAlert(title: String, message: String, style: UIAlertControllerStyle, completion: (() -> Void)?, okButtonText: String, actionStyle: UIAlertActionStyle, afterHittingAction: ((UIAlertAction) -> Void)?) {
        
        testTitleOfAlertView = title
        testMessageOfAlertView = message
        testDisplayedMessageToUserUsingAlertViewCount += 1
    }
}

class ErrorHandlerTests: XCTestCase {
    var sut: _ErrorHandler!
    var mockViewController: MockUIViewController!
    
    override func setUp() {
        super.setUp()
        // GIVEN
        mockViewController = MockUIViewController()
        sut = _ErrorHandler()
    }
    
    override func tearDown() {
        sut = nil
        mockViewController = nil
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }
    
    func test_displayErrorOnDeviceScreen_calls_alertViewController_once() {
        // WHEN
        sut.displayErrorOnDeviceScreen(viewController: mockViewController, error: nil)
        
        // THEN
        XCTAssertEqual(mockViewController.testDisplayedMessageToUserUsingAlertViewCount, 1)
    }
    
    func test_displayErrorOnDeviceScreen_calls_alertViewControllerWithDefaultMessages_with_FallBackTitleAndMessage_on_EmptyError() {
        // WHEN
        sut.displayErrorOnDeviceScreen(viewController: mockViewController, error: nil)
        
        // THEN
        XCTAssertEqual(mockViewController.testTitleOfAlertView!, Constants.CustomErrors.Fallback.title)
        XCTAssertEqual(mockViewController.testMessageOfAlertView!, Constants.CustomErrors.Fallback.message)
    }
    
    func test_displayErrorOnDeviceScreen_calls_alertViewControllerWithDefaultMessages_with_KnownUserFriendlyErrorTitleAndMessage_on_KnownCustomAppError() {
        // GIVEN
        let newError = NSError(domain: "DySiDataManagerError", code: 100, userInfo: ["message": " Could not unwrap the url for getting all public posts"])
        
        // WHEN
        sut.displayErrorOnDeviceScreen(viewController: mockViewController, error: newError)
        
        // THEN
        XCTAssertEqual(mockViewController.testTitleOfAlertView!, "Uh oh!")
        XCTAssertEqual(mockViewController.testMessageOfAlertView!, "Unable to open the page. Please retry")
    }
}
