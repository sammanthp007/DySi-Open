//
//  AllPostsTableViewModelTests.swift
//  DySiOpenTests
//
//  Created by Samman Thapa on 5/8/18.
//  Copyright Â© 2018 Samman Labs. All rights reserved.
//

import XCTest
@testable import DySi_Open

protocol TestDySiDataManagerProtocol: DySiDataManagerProtocol {
    var capturedCompletion: ((Error?, [[String: Any]]?) -> Void)? { get }
}

class MockDySiDataManagerSuccessful: DySiDataManager, TestDySiDataManagerProtocol {
    let validArrayOfPostDictionary: [[String:Any]] = [
        [
        "title": "New Post",
        "description": "This is the description of a post.",
        "cleanPermaLink": "https://www.forbes.com/sites/adp/2018/04/30/the-many-layers-of-the-gender-pay-gap-issue/?ss=business",
        "postBylineType": "Author",
        "author": [
            "author": "Dynamic Signal",
            "profileImageUrl": "https://userprofilephoto.jpg",
            "providerUserId": "UCluZGsVZb1ZaJf1dYr6LWHQ",
            "providerUserName": "Dynamic Signal",
            "profileUrl": "http://www.youtube.com/channel/UCluZGsVZb1ZaJf1dYr6LWHQ",
            "postSourceName": "Dynamic Signal YouTube Channel",
            "postSourceSite": "youtube.com"
        ],
        "media": [
            [
                "url": "https:secondaryimage.jpg",
                "role": "image",
                ],
            [
                "url": "https://coverimage.jpg",
                "role": "image,original",
                ]
            ],
        "createdDate": "2018-04-30T17:54:13.4188260Z"
        ],
        [
            "title": "New Post II",
            "description": "This is the description of a post II.",
            "cleanPermaLink": "https://www.forbes.com/sites/adp/2018/04/30/the-many-layers-of-the-gender-pay-gap-issue/?ss=business",
            "postBylineType": "Hidden",
            "author": [
                "postSourceName": "Dynamic Signal YouTube Channel",
                "postSourceSite": "youtube.com"
            ],
            "media": [],
            "createdDate": "2018-04-30T17:54:13.4188260Z"
        ]
    ]
    var capturedCompletion: ((Error?, [[String: Any]]?) -> Void)?

    override func fetchAllPublicPosts(completion: @escaping (Error?, [[String : Any]]?) -> Void) {
        capturedCompletion = completion
        completion(nil, self.validArrayOfPostDictionary)
    }
}

class MockDySiDataManagerUnSuccessful: DySiDataManager, TestDySiDataManagerProtocol {
    var capturedCompletion: ((Error?, [[String: Any]]?) -> Void)?

    override func fetchAllPublicPosts(completion: @escaping (Error?, [[String : Any]]?) -> Void) {
        let newError = NSError(domain: "DySiDataManagerError", code: 404, userInfo: ["message": "Could not find any data over network"])
        capturedCompletion = completion
        completion(newError, nil)
    }
}

protocol TestAllPostTableViewModelProtocol: AllPostTableViewModelProtocol {
    var tableViewReloadCount: Int { get }
}

class MockAllPostsTableViewModel: AllPostsTableViewModel, TestAllPostTableViewModelProtocol {
    public var tableViewReloadCount: Int = 0
    override var reloadTableNodeClosure: (() -> ())? {
        set {
            return
        }
        get {
            return { [weak self] () in
                self!.tableViewReloadCount += 1
            }
        }
    }
}

class AllPostsTableViewModelTests: XCTestCase {
    var sut: TestAllPostTableViewModelProtocol!
    var mockDySiDataManager: TestDySiDataManagerProtocol!
    var allPosts: [DySiPost]!

    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }

    override func tearDown() {
        allPosts = nil
        mockDySiDataManager = nil
        sut = nil
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    func test_tableViewWillReload_with_successfulDataManager() {
        // GIVEN
        mockDySiDataManager = MockDySiDataManagerSuccessful()
        sut = MockAllPostsTableViewModel(dataManager: mockDySiDataManager)

        let expectation = self.expectation(description: #function)
        // WHEN
        sut.fetchAllPosts { [weak self] (error) in
            // THEN
            XCTAssertNil(error)
            XCTAssertEqual(self!.sut.tableViewReloadCount, 1)
            expectation.fulfill()
        }

        // THEN (continues)
        waitForExpectations(timeout: 1, handler: nil)
    }

    func test_tableViewWillReload_with_unSuccessfulDataManager() {
        // GIVEN
        mockDySiDataManager = MockDySiDataManagerUnSuccessful()
        sut = MockAllPostsTableViewModel(dataManager: mockDySiDataManager)

        let expectation = self.expectation(description: #function)
        // WHEN
        sut.fetchAllPosts { [weak self] (error) in
            // THEN
            XCTAssertNotNil(error)
            XCTAssertEqual(self!.sut.tableViewReloadCount, 0)
            expectation.fulfill()
        }

        // THEN (continues)
        waitForExpectations(timeout: 1, handler: nil)
    }

    func test_getNumberOfRowsInSection_with_successfulDataManager() {
        // GIVEN
        mockDySiDataManager = MockDySiDataManagerSuccessful()
        sut = MockAllPostsTableViewModel(dataManager: mockDySiDataManager)

        let expectation = self.expectation(description: #function)
        // WHEN
        sut.fetchAllPosts { [weak self] (error) in
            // THEN
            XCTAssertNil(error)
            XCTAssertEqual(self!.sut.tableViewReloadCount, 1)
            expectation.fulfill()
        }

        // THEN
        XCTAssertEqual(sut.getNumberOfRowsInSection(in: 0), 2)

        // THEN (continues)
        waitForExpectations(timeout: 1, handler: nil)
    }

    func test_getNumberOfRowsInSection_with_unSuccessfulDataManager() {
        // GIVEN
        mockDySiDataManager = MockDySiDataManagerUnSuccessful()
        sut = MockAllPostsTableViewModel(dataManager: mockDySiDataManager)

        let expectation = self.expectation(description: #function)
        // WHEN
        sut.fetchAllPosts { [weak self] (error) in
            // THEN
            XCTAssertNotNil(error)
            XCTAssertEqual(self!.sut.tableViewReloadCount, 0)
            expectation.fulfill()
        }

        // THEN
        XCTAssertEqual(sut.getNumberOfRowsInSection(in: 0), 0)

        // THEN (continues)
        waitForExpectations(timeout: 1, handler: nil)
    }

    func test_getCellViewModel_with_successfulDataManager() {
        // GIVEN
        mockDySiDataManager = MockDySiDataManagerSuccessful()
        sut = MockAllPostsTableViewModel(dataManager: mockDySiDataManager)

        let expectation = self.expectation(description: #function)
        // WHEN
        sut.fetchAllPosts { [weak self] (error) in
            // THEN
            XCTAssertNil(error)
            XCTAssertEqual(self!.sut.tableViewReloadCount, 1)
            expectation.fulfill()
        }

        // THEN
        XCTAssertNotNil(sut.getCellViewModel(for: IndexPath(row: 0, section: 0)))
        XCTAssertEqual(sut.getNumberOfRowsInSection(in: 0), 2)

        // THEN (continues)
        waitForExpectations(timeout: 1, handler: nil)
    }

    func test_getCellViewModel_with_unSuccessfulDataManager() {
        // GIVEN
        mockDySiDataManager = MockDySiDataManagerUnSuccessful()
        sut = MockAllPostsTableViewModel(dataManager: mockDySiDataManager)

        let expectation = self.expectation(description: #function)
        // WHEN
        sut.fetchAllPosts { [weak self] (error) in
            // THEN
            XCTAssertNotNil(error)
            XCTAssertEqual(self!.sut.tableViewReloadCount, 0)
            expectation.fulfill()
        }

        // THEN
        XCTAssertNil(sut.getCellViewModel(for: IndexPath(row: 0, section: 0)))
        XCTAssertEqual(sut.getNumberOfRowsInSection(in: 0), 0)

        // THEN (continues)
        waitForExpectations(timeout: 1, handler: nil)
    }

    func test_getPermalinkOfPost_with_successfulDataManager() {
        // GIVEN
        mockDySiDataManager = MockDySiDataManagerSuccessful()
        sut = MockAllPostsTableViewModel(dataManager: mockDySiDataManager)

        let expectation = self.expectation(description: #function)
        // WHEN
        sut.fetchAllPosts { [weak self] (error) in
            // THEN
            XCTAssertNil(error)
            XCTAssertEqual(self!.sut.tableViewReloadCount, 1)
            expectation.fulfill()
        }

        // THEN
        XCTAssertEqual(sut.getPermalinkOfPost(for: IndexPath(row: 0, section: 0)), URL(string: "https://www.forbes.com/sites/adp/2018/04/30/the-many-layers-of-the-gender-pay-gap-issue/?ss=business")!)

        // THEN (continues)
        waitForExpectations(timeout: 1, handler: nil)
    }

    func test_getPermalinkOfPost_with_unSuccessfulDataManager() {
        // GIVEN
        mockDySiDataManager = MockDySiDataManagerUnSuccessful()
        sut = MockAllPostsTableViewModel(dataManager: mockDySiDataManager)

        let expectation = self.expectation(description: #function)
        // WHEN
        sut.fetchAllPosts { [weak self] (error) in
            // THEN
            XCTAssertNotNil(error)
            XCTAssertEqual(self!.sut.tableViewReloadCount, 0)
            expectation.fulfill()
        }

        // THEN
        XCTAssertEqual(sut.getPermalinkOfPost(for: IndexPath(row: 0, section: 0)), URL(string: Constants.ForDySiAPI.URLS.FallBackPermaLink)!)

        // THEN (continues)
        waitForExpectations(timeout: 1, handler: nil)
    }
}
