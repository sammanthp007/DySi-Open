//
//  PostTableNodeCellViewModelTests.swift
//  DySiOpenTests
//
//  Created by Samman Thapa on 5/8/18.
//  Copyright Â© 2018 Samman Labs. All rights reserved.
//

import XCTest
@testable import DySi_Open

class PostTableNodeCellViewModelTests: XCTestCase {
    // GIVEN
    let validDictionary: [String:Any] = [
        "title": "New Post",
        "description": "This is the description of a post.",
        "cleanPermaLink": "https://www.forbes.com/sites/adp/2018/04/30/the-many-layers-of-the-gender-pay-gap-issue/?ss=business",
        "postBylineType": "Author",
        "author": [
            "author": "Dynamic Signal",
            "profileImageUrl": "https://userprofilephoto.jpg",
            "providerUserId": "UCluZGsVZb1ZaJf1dYr6LWHQ",
            "providerUserName": "Dynamic Signal",
            "profileUrl": "http://www.youtube.com/channel/UCluZGsVZb1ZaJf1dYr6LWHQ",
            "postSourceName": "Dynamic Signal YouTube Channel",
            "postSourceSite": "youtube.com"
        ],
        "media": [
            [
                "url": "https:secondaryimage.jpg",
                "role": "image",
                ],
            [
                "url": "https://coverimage.jpg",
                "role": "image,original",
                ]
        ],
        "createdDate": "2018-04-30T17:54:13.4188260Z"
    ]
    
    var validDySiPost: DySiPost!
    var sut: PostTableNodeCellViewModelProtocol!

    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
        validDySiPost = DySiPost(postDict: validDictionary)
    }
    
    override func tearDown() {
        validDySiPost = nil
        sut = nil
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        super.tearDown()
    }

    func test_cellViewModelCreationWithValidModel() {
        // WHEN
        sut = PostTableNodeCellViewModel(post: validDySiPost!)

        // THEN
        XCTAssertEqual(sut.displayableAuthorName!, "Dynamic Signal")
        XCTAssertEqual(sut.profileImageUrlStringOfAuthor!, "https://userprofilephoto.jpg")
        XCTAssertEqual(sut.descriptionText!, "This is the description of a post.")
        XCTAssertEqual(sut.displayableTitle!, "New Post")
        XCTAssertEqual(sut.displayableDateString!, "April 30, 2018")
        XCTAssertEqual(sut.coverImageURLString!, "https://coverimage.jpg")
        XCTAssertEqual(sut.permaLinkUrlString, "https://www.forbes.com/sites/adp/2018/04/30/the-many-layers-of-the-gender-pay-gap-issue/?ss=business")
        XCTAssertEqual(sut.sourceSiteString, "youtube.com")
        XCTAssertEqual(sut.showAuthorInfoInDisplay, true)
    }
    
    func test_cellViewModelCreationWithPostLineTypeAsHidden() {
        // WHEN
        validDySiPost.author?.postBylineType = .hidden
        sut = PostTableNodeCellViewModel(post: validDySiPost!)

        // THEN
        XCTAssertEqual(sut.showAuthorInfoInDisplay, false)
    }

    func test_cellViewModelCreationWithNoPermaLink() {
        // WHEN
        validDySiPost.cleanPermaLinkString = nil
        sut = PostTableNodeCellViewModel(post: validDySiPost!)
        
        // THEN
        XCTAssertEqual(sut.permaLinkUrlString, Constants.SubstitutionTextsInModels.ForPostModel.PermaLinkNotAvailable)
        XCTAssertEqual(sut.showAuthorInfoInDisplay, true)
    }

    func test_cellViewModelCreationWithBadlyFormattedCreationDate() {
        // WHEN
        validDySiPost.createdDateString = "abcd"
        sut = PostTableNodeCellViewModel(post: validDySiPost!)
        
        // THEN
        XCTAssertNil(sut.displayableDateString)
    }
    
    func test_cellViewModelCreationWithNoAuthorName() {
        // WHEN
        validDySiPost.author!.author = nil
        sut = PostTableNodeCellViewModel(post: validDySiPost!)
        
        // THEN
        XCTAssertNil(sut.displayableAuthorName)
        XCTAssertEqual(sut.profileImageUrlStringOfAuthor!, "https://userprofilephoto.jpg")
        XCTAssertEqual(sut.showAuthorInfoInDisplay, true)
    }
}
